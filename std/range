(/rl/)

INCLUDE 'std/types'
INCLUDE 'std/math/safe'
INCLUDE 'std/err/indexoutofrange'

::std::range
{
	[T: TYPE] copy_assign(
		dst: T! \,
		src: T!# \,
		count: UM) VOID
	{
		FOR(i ::= 0; i<count; i++)
			dst[i] := src[i];
	}

	[T: TYPE] default_construct(
		range: T! \,
		count: UM) VOID
	{
		FOR(i ::= 0; i<count; i++)
			range[i].{};
	}


	[T: TYPE] copy_construct(
		dst: T! \,
		src: T!# \,
		count: UM) VOID
	{
		FOR(i ::= 0; i<count; i++)
			dst[i].{src[i]};
	}

	[T: TYPE] move_construct(
		dst: T! \,
		src: T! \,
		count: UM) VOID
	{
		FOR(i ::= 0; i<count; i++)
			dst[i].{::__cpp_std::move(src[i])};
	}

	[T: TYPE] destroy(
		range: T! \,
		count: UM) INLINE VOID
	{
		FOR(i ::= 0; i<count; i++)
			__rl::DESTRUCTOR(range[i]);
	}

	check(
		range: UM,
		index: UM) INLINE VOID
	{
		IF(index >= range)
			THROW err::IndexOutOfRange(range, index);
	}

	check_subrange(
		sub_start: UM,
		sub_size: UM,
		size: UM) INLINE VOID
	{
		IF(math::safe::add(sub_start, sub_size) > size)
			THROW err::IndexOutOfRange(size, sub_start + sub_size);
	}
}