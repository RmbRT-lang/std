
(/rl/)

INCLUDE 'std/math/safe'
INCLUDE 'std/err/indexoutofrange'

(// A sub-range within an integer-indexed collection. /)
::std Range
{
	Start: UM;
	Size: UM;
	Checked: BOOL;

	{};

	{
		start: UM,
		size: UM
	} -- :
		Start(start),
		Size(size),
		Checked(FALSE);
	
	:ok{
		start: UM,
		size: UM
	} -- :
		Start(start),
		Size(size),
		Checked(TRUE);

	/// Throws if the range is outside the supplied bounds.
	# THIS(bounds: UM) VOID --
	{
		IF(!Checked)
			IF(math::safe::add(Start, Size) > bounds)
				THROW <std::err::IndexOutOfRange>(bounds, Start+Size);
	}
}

::std::range
{
	[T: TYPE] copy_assign(
		dst: T! \,
		src: T!# \,
		count: UM) VOID
	{
		FOR(i ::= 0; i<count; i++)
			dst[i] := src[i];
	}

	[T: TYPE] move_assign(
		dst: T! \,
		src: T! \,
		count: UM) VOID
	{
		FOR(i ::= 0; i < count; i++)
			dst[i] := &&src[i];
	}

	[T: TYPE] default_construct(
		range: T! \,
		count: UM) VOID
	{
		i: UM;
		TRY FOR(i := 0; i<count; i++)
			range[i].{};
		FINALLY IF(i != count)
			destroy(range, i);
	}

	[T: TYPE] bare_construct(
		range: T! \,
		count: UM) VOID
	{
		i: UM;
		TRY FOR(i := 0; i<count; i++)
			range[i].{BARE};
		FINALLY IF(i != count)
			destroy(range, i);
	}


	[T: TYPE] copy_construct(
		dst: T! \,
		src: T!# \,
		count: UM) UM
	{
		i: UM;
		TRY FOR(i := 0; i<count; i++)
			dst[i].{src[i]};
		FINALLY IF(i != count)
			destroy(dst, i);
		= count;
	}

	[T: TYPE] move_construct(
		dst: T! \,
		src: T! \,
		count: UM) VOID
	{
		i: UM;
		TRY FOR(i := 0; i<count; i++)
			dst[i].{&&src[i]};
		FINALLY IF(i != count)
			destroy(dst, i);
	}

	[T: TYPE] move_assign_r(
		dst: T! \,
		src: T! \,
		count: UM) VOID
	{
		FOR(i ::= count; i--;)
			dst[i] := &&src[i];
	}

	[T: TYPE] destroy(
		range: T! \,
		count: UM) VOID --
	{
		FOR(i ::= 0; i<count; i++)
			range[i].~;
	}

	[T: TYPE] ArrayIter
	{
		Range: T! \;
		Index: UM;
		Size: UM;

		{...};

		# <BOOL> -- := Index < Size;
		# *THIS T!& -- := Range[Index];
		# THIS! T!& -- := *THIS;

		THIS++ THIS -- { t ::= THIS; ++Index; = t; }
		++THIS THIS& -- { ++Index; = THIS; }
		THIS-- THIS -- { t ::= THIS; --Index; = t; }
		--THIS THIS& -- { --Index; = THIS; }

		# THIS() UM := Index;
	}
	::detail [T: TYPE] array_iter(arr: T! *, i: UM, sz: UM) [T!]ArrayIter
		:= (arr, i, sz);

	[T: TYPE] start(range: T! &&) ? := detail::array_iter(&range[0], 0, ##range);
	[T: TYPE] end(range: T! &&) ?
		:= detail::array_iter(&range[0], ##range-1, ##range);
}