(/rl/)

INCLUDE 'std/memory'
INCLUDE 'std/vector'

::std [T: TYPE] MASK Set
{
	(// Queries whether a value is in the set. /)
	# has(key: T! #&) BOOL;

	(// Inserts a value into the set.
	@return
		Whether the value was not in the set yet. /)
	insert(v: T! #&) BOOL;

	(// Inserts a value into the set.
	@return
		Whether the value was not in the set yet. /)
	insert(v: T! &&) BOOL;

	(// Removes a value from the set.
	@return
		Whether the value was in the set. /)
	remove(v: T! #&) BOOL;
}

::std [T: TYPE; Cmp: TYPE] VectorSet
{
	PRIVATE Elems: [T!]Vector;

	TYPE Location := UM;

	start() INLINE ::= Elems.start();
	# start() INLINE ::= Elems.start();
	end() INLINE ::= Elems.end();
	# end() INLINE ::= Elems.end();
	# empty() INLINE BOOL := Elems.empty();

	# ##THIS UM := ##Elems;

	[V: TYPE]
	# find(
		v: V! #&
	) T! # *
	{
		dummy: Location;
		RETURN find(v, &dummy);
	}

	[V: TYPE]
	# find(v: {:location, V! #&}) { T! #*, Location }
	{
		loc: Location;
		ret ::= find(v.(1), &loc);
		RETURN (ret, loc);
	}

	[V: TYPE]
	# find(
		v: V! #&,
		location: Location \
	) T! # *
	{
		l: UM := 0;
		r: UM := ##Elems;

		i: UM := 0;
		WHILE(l < r)
		{
			i := (l + r)>>1;
			sign ::= Cmp::cmp(v, Elems[i]);
			IF(sign < 0)
				r := i;
			ELSE IF(sign > 0)
				l := i+1;
			ELSE
			{
				*location := i;
				RETURN &Elems[i];
			}
		}

		*location := l;
		RETURN NULL;
	}

	[V: TYPE]
	find(
		v: V! #&
	) T! *
	{
		dummy: Location;
		RETURN find(v, &dummy);
	}

	[V: TYPE]
	find(v: {:location, V! #&}) {T! *, Location}
	{
		loc: Location;
		ret ::= find(v.(1), &loc);
		RETURN (ret, loc);
	}

	[V: TYPE]
	find(
		v: V! #&,
		location: Location \
	) T! *
	{
		l: UM := 0;
		r: UM := ##Elems;

		i: UM := 0;
		WHILE(l < r)
		{
			i := (l + r)>>1;
			sign ::= Cmp::cmp(v, Elems[i]);
			IF(sign < 0)
				r := i;
			ELSE IF(sign > 0)
				l := i+1;
			ELSE
			{
				*location := i;
				RETURN &Elems[i];
			}
		}

		*location := l;
		RETURN NULL;
	}

	insert_at(
		position: Location #&,
		v: T!#&) INLINE T! &
		:= emplace_at(position, v);

	insert_at(
		position: Location #&,
		v: T!&&) INLINE T! &
		:= emplace_at(position, &&v);

	insert(v: T#&) BOOL
	{
		loc: Location;
		IF(find(v, &loc))
			RETURN FALSE;
		insert_at(loc, v);
		RETURN TRUE;
	}

	insert(v: T&&) BOOL
	{
		loc: Location;
		IF(find(v, &loc))
			RETURN FALSE;
		insert_at(loc, &&v);
		RETURN TRUE;
	}

	remove_at(
		position: Location #&) VOID
	{
		Elems.erase(position);
	}

	[V: TYPE]
	remove(v: V! #&) BOOL
	{
		loc: Location;
		IF(find(v, &loc))
		{
			remove_at(loc);
			RETURN TRUE;
		}
		RETURN FALSE;
	}

	[V: TYPE]
	remove(v: V! #&, deleted: T! \) BOOL
	{
		loc: Location;
		IF(it ::= find(v, &loc))
		{
			*deleted := &&*it;
			remove_at(loc);
			RETURN TRUE;
		}
		RETURN FALSE;
	}


	[A...:TYPE]
	emplace_at(
		position: Location #&,
		a: A!&&...) T! &
	{
		Elems.emplace(position, <A!&&>(a)...);
		RETURN Elems[position];
	}
}