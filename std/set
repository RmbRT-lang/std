(/rl/)

INCLUDE 'std/memory'
INCLUDE 'std/vector'

::std [T: TYPE] CONCEPT Set
{
	(// Queries whether a value is in the set. /)
	# has(key: T! #&) bool;

	(// Inserts a value into the set.
	@return
		Whether the value was not in the set yet. /)
	insert(v: T! #&) bool;

	(// Inserts a value into the set.
	@return
		Whether the value was not in the set yet. /)
	insert(v: T! &&) bool;

	(// Removes a value from the set.
	@return
		Whether the value was in the set. /)
	remove(v: T! #&) bool;
}

::std [T: TYPE, Cmp: TYPE] VectorSet
{
	PRIVATE Elems: [T!]Vector;

	TYPE Location := UM;

	Iterator
	{
		PRIVATE Elems: [T!]Vector #\;
		PRIVATE Current: UM;

		CONSTRUCTOR(
			elems: [T!]Vector #\,
			start: UM):
				Elems(elems),
				Current(start);

		# get() T! #& := (*Elems)[Current];

		next() VOID
		{
			IF(*THIS)
				++Current;
		}

		# CONVERT(bool) INLINE NOTYPE!
			:= Current < Elems->size();
	}

	# range() INLINE [T!, Cmp!]VectorSet::Iterator
		:= [T!, Cmp!]VectorSet::Iterator(&Elems, 0);
	# empty() INLINE bool := Elems.empty();

	[V: TYPE]
	# find(
		v: V! #&
	) T! # *
	{
		dummy: Location;
		RETURN find(v, &dummy);
	}

	[V: TYPE]
	# find(
		v: V! #&,
		location: Location \
	) T! # *
	{
		l: UM := 0;
		r: UM := Elems.size();

		i: UM := 0;
		WHILE(l < r)
		{
			i := (l + r)>>1;
			sign ::= Cmp::cmp(v, Elems[i]);
			IF(sign < 0)
				r := i;
			ELSE IF(sign > 0)
				l := i+1;
			ELSE
			{
				*location := i;
				RETURN &Elems[i];
			}
		}

		*location := l;
		RETURN NULL;
	}

	[V: TYPE]
	find(
		v: V! #&
	) T! *
	{
		dummy: Location;
		RETURN find(v, &dummy);
	}

	[V: TYPE]
	find(
		v: V! #&,
		location: Location \
	) T! *
	{
		l: UM := 0;
		r: UM := Elems.size();

		i: UM := 0;
		WHILE(l < r)
		{
			i := (l + r)>>1;
			sign ::= Cmp::cmp(v, Elems[i]);
			IF(sign < 0)
				r := i;
			ELSE IF(sign > 0)
				l := i+1;
			ELSE
			{
				*location := i;
				RETURN &Elems[i];
			}
		}

		*location := l;
		RETURN NULL;
	}

	insert_at(
		position: Location #&,
		v: T!#&) INLINE T! &
		:= emplace_at(position, v);

	insert_at(
		position: Location #&,
		v: T!&&) INLINE T! &
		:= emplace_at(position, __cpp_std::move(v));

	insert(v: T#&) bool
	{
		loc: Location;
		IF(find(v, &loc))
			RETURN FALSE;
		insert_at(loc, v);
		RETURN TRUE;
	}

	insert(v: T&&) bool
	{
		loc: Location;
		IF(find(v, &loc))
			RETURN FALSE;
		insert_at(loc, __cpp_std::move(v));
		RETURN TRUE;
	}

	remove_at(
		position: Location #&) VOID
	{
		Elems.erase(position);
	}

	[V: TYPE]
	remove(v: V! #&) bool
	{
		loc: Location;
		IF(find(v, &loc))
		{
			remove_at(loc);
			RETURN TRUE;
		}
		RETURN FALSE;
	}


	[A:TYPE]
	emplace_at(
		position: Location #&,
		a0: A!&&) T! &
	{
		Elems.emplace(position, __cpp_std::[A!]forward(a0));
		RETURN Elems[position];
	}

	[A:TYPE, B:TYPE]
	emplace_at(
		position: Location #&,
		a0: A!&&,
		a1: B!&&) T! &
	{
		Elems.emplace(
			position,
			__cpp_std::[A!]forward(a0),
			__cpp_std::[B!]forward(a1));
		RETURN Elems[position];
	}
}