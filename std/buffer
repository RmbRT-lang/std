(/rl/)

INCLUDE 'std/iterator'
INCLUDE 'std/range'
INCLUDE 'std/index'

(// A buffer keeps track of allocated memory but does not own it. /)
::std [T: TYPE] Buffer
{
	Data: T! *;
	Size: UM;

	{};
	{NULL};
	{s: T! *, c: UM}: Data(s), Size(c)
	{
		ASSERT(!Size || Data);
	}

	:buf{s: T! *, c: UM} (s, c);

	# THIS++ INLINE {:buf, T! \, UM!} := :buf(Data, Size);
	# <BOOL> INLINE := Data != NULL;

	#? THIS[i: Index #&] INLINE T!#?& := Data[i(Size)];

	# range(
		r: Range #&) INLINE [T!]Buffer
	{
		r(Size);
		= (Data + r.Start, r.Size);
	}

	# drop_start(start: Index) [T!]Buffer
		:= range((start(Size), Size - start(Size)));
	# drop_end(count: Index) [T!]Buffer
		:= range((0, Size - count(Size)));
	# cut(size: Index) [T!]Buffer
		:= range((0, size(Size)));
	# cut_start(size: Index) [T!]Buffer
		:= range((Size-size(Size), size(Size)));

	# ##THIS INLINE UM := Size;

	#? front() INLINE T!#?& := THIS[0];
	#? start() INLINE [T!]Buffer#?-Iterator := (&THIS, 0);

	#? back() INLINE T!#?& := THIS[Size-1];
	#? end() INLINE [T!]Buffer#?-Iterator := (&THIS, Size-1);

	# empty() INLINE BOOL := !Size;
}

::std::range [T: TYPE] destroy(v: [T!]Buffer) INLINE VOID
	:= destroy(v.Data, v.Size);