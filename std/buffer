(/rl/)

INCLUDE 'std/iterator'
INCLUDE 'std/range'
INCLUDE 'std/index'
INCLUDE 'std/hashable'
INCLUDE 'std/hash'

(// A buffer keeps track of allocated memory but does not own it. /)
::std [T: TYPE] Buffer -> CustomHashable0Cost
{
	Data: T! *;
	Size: U4;
	Unused: U4;

	//{#&cpy}: Data := cpy.Data, Size := cpy.Size, Unused := cpy.Unused;
	//{&&};
	{}--: Unused(NOINIT);
	{NULL}--: Unused(NOINIT);
	{s: T! *, c: U4}: Data(s), Size(c), Unused(NOINIT)
	{
		ASSERT(!Size || Data);
	}
	{BARE} (NULL);

	:buf{s: T! *, c: U4} (s, c);
	[V:TYPE] :array{v: V! &&} := :buf(&v[0], ##v);

	# THIS++ {:buf, T! *, U4} -- := :buf(Data, Size);
	# <BOOL> -- := Size != 0;

	#? THIS[i: Index #&] T!#?& -- := Data[i(Size)];

	# range(
		r: Range #&) [T!]Buffer --
	{
		r(Size);
		= (Data + r.Start, r.Size);
	}

	# drop_start(count: Index) [T!]Buffer
		:= range((count[Size], Size - count[Size]));
	# drop_end(count: Index) [T!]Buffer
		:= range((0, Size - count[Size]));
	# cut(size: Index) [T!]Buffer
		:= range((0, size[Size]));
	# cut_start(size: Index) [T!]Buffer
		:= range((Size-size[Size], size[Size]));

	# ##THIS U4 -- := Size;

	#? front() T!#?& -- := THIS[0];
	#? start() [T!]Buffer#?-[T!#?]Iterator -- := (&THIS, 0);

	#? back() T!#?& --:= THIS[Size-1];
	#? end() [T!]Buffer#?-[T!#?]Iterator -- := (&THIS, Size-1);

	# empty() BOOL -- := !Size;

	# THIS<>(rhs: THIS#&) S1
	{
		IF(s ::= Size <> rhs.Size)
			= s;
		FOR(it ::= start().ok())
			IF(s ::= *it <> rhs[:ok(it())])
				= s;
		= 0;
	}

	# THIS==(rhs: THIS#&) BOOL
	{
		IF(Size != rhs.Size)
			= FALSE;
		FOR(it ::= start().ok())
			IF(*it != rhs[:ok(it())])
				= FALSE;
		= TRUE;
	}

	# hash(h: Hasher &) VOID
	{
		h(##THIS);
		FOR(i ::= start().ok())
			h(*i);
	}
}

::std::range [T: TYPE] destroy_buf(v: [T!]Buffer) VOID --
	:= destroy(v.Data, v.Size);