(/rl/)

INCLUDE 'std/io/format'
INCLUDE 'std/io/stream'
INCLUDE 'std/str'
INCLUDE 'std/rawstorage'

::std::io [O: TYPE; T...:TYPE] write(o: O!&&, args: T!&&...) VOID --
{
	os: ?&& := <<<OStream>>>(<O!&&>(o));
	<detail::StreamInput>(<T!&&>(args)).stream(os)...;
}

::std::io::detail StreamInput
{
	ENUM Type
	{
		buffer,
		streamable,
		char,
		dec,
		hex
	}

	PRIVATE RawBuffer {
		Data: VOID #*;
		Bytes: UM;
		{data: VOID#*, bytes: UM} --: Data(data), Bytes(bytes);
	}
	UNION RawBufferOrStreamable
	{
		Buf: RawBuffer;
		Char: CHAR;
		DecNumber: {BOOL, UM, U1}; // (sign, bits, minDigits)
		HexNumber: {BOOL, UM, U1}; // (sign, bits, minDigits)
		StreamableStorage: std::[#2]RawStorage;
	}
	ValueType: Type;
	Value: RawBufferOrStreamable;

	[T: TYPE]
	:buf
	{
		slice: T! #\,
		count: UM
	} --: ValueType(:buffer)
	{ Value.Buf := (slice, count * SIZEOF(T)); }

	:raw{
		slice: VOID #\,
		bytes: UM
	} --: ValueType(:buffer)
	{ Value.Buf := (slice, bytes); }

	{string: CHAR#\} --: ValueType(:buffer)
	{ Value.Buf := (string, str::len(string)); }
	:ch{c: CHAR} --: ValueType(:char)
	{ Value.Char := c; }

	[T: TYPE]
	:stream {s: T! #&} --: ValueType(:streamable)
	{
		Value.StreamableStorage := <<<io::Streamable>>>(&s);
	}

	[T:TYPE] :dec{v:T!} -- (:decn, v, 0);
	[T:TYPE] :decn{v: T!, minDigits: U1} --: ValueType(:dec)
	{
		TYPE SWITCH STATIC(v)
		{
		U1, U2, U4, U8: Value.DecNumber := (FALSE, v, minDigits);
		S1, S2, S4, S8: Value.DecNumber := (v < 0, <SM>(v), minDigits);
		}
	}

	:addr{v: VOID #*} -- := :hex(<UM>(v));
	[T:TYPE] :hexm {v: T!} -- (:hexn(v, 2 * SIZEOF(T)));
	[T:TYPE] :hex {v: T!} -- (:hexn(v, 0));
	[T:TYPE] :hexn {v: T!, minDigits: U1} --: ValueType(:hex)
	{
		TYPE SWITCH STATIC(v)
		{
		U1, U2, U4, U8: Value.HexNumber := (FALSE, v, minDigits);
		S1, S2, S4, S8: Value.HexNumber := (v < 0, <SM>(v), minDigits);
		}
	}

	# stream(o: OStream &) VOID --
	{ 
		SWITCH(ValueType)
		{
		:buffer: o.write(Value.Buf.Data, Value.Buf.Bytes);
		:streamable: Value.StreamableStorage.[Streamable#]to()->stream(o);
		:dec: Value.DecNumber.(0)
			?? format::[SM]dec(o, Value.DecNumber.(1), Value.DecNumber.(2))
			: format::[UM]dec(o, Value.DecNumber.(1), Value.DecNumber.(2));
		:hex: Value.HexNumber.(0)
			?? format::[SM]hex(o, Value.HexNumber.(1), Value.HexNumber.(2), TRUE)
			: format::[UM]hex(o, Value.HexNumber.(1), Value.HexNumber.(2), TRUE);
		:char: o.write(&Value.Char, 1);
		}
	}
}
