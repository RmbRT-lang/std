(/rl/)

INCLUDE 'std/types'
INCLUDE 'std/io/stream'
INCLUDE 'std/tags'

::std::io
{
	out: File(libc::stdout);
	in: File(libc::stdin);
	err: File(libc::stderr);

	File
	{
		PRIVATE F: libc::FileHandle \;
		NoCopy;

		{h: libc::FileHandle \}: F(h)
		{
			IF(!F)
				THROW;
		}
		write_some_impl(d: VOID #\, s: UM) INLINE UM := libc::fwrite(d, 1, s, F);
		write(d: VOID #\, s: UM) INLINE ::= <<<io::OStream>>>(&THIS).write(:raw(d, s));
		read(d: VOID \, s: UM) INLINE UM := libc::fread(d, 1, s, F);
		flush() INLINE INT := libc::fflush(F);
		eof() INLINE BOOL := libc::feof(F);
		line(d: CHAR \, s: UM) INLINE CHAR * := libc::fgets(d, s, F);

		DESTRUCTOR { libc::fclose(F); }
		{file: CHAR #\, mode: CHAR#\}:
			F(libc::fopen(file, mode))
		{
			IF(!F)
				THROW;
		}

		print(str: CHAR #\) ::= libc::fputs(str, F);
	}
}

::std::io::libc
{
	FileHandle {}
	EXTERN fopen(CHAR#\,CHAR#\) FileHandle *;
	EXTERN fclose(FileHandle *) VOID;
	EXTERN fwrite(VOID#\, UM, UM, FileHandle *) UM;
	EXTERN fread(VOID\, UM, UM, FileHandle *) UM;
	EXTERN feof(FileHandle *) INT;
	EXTERN ferror(FileHandle *) INT;
	EXTERN fflush(FileHandle \) INT;
	EXTERN fputs(CHAR #\, FileHandle \) INT;
	EXTERN fgets(CHAR\, INT, FileHandle \) CHAR *;

	EXTERN stdin: FileHandle *;
	EXTERN stdout: FileHandle *;
	EXTERN stderr: FileHandle *;
	EXTERN errno: INT;
}