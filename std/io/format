(/rl/)

INCLUDE 'std/io/stream'
INCLUDE 'std/buffer'

::std::io::format
{
	[T:TYPE] hex(
		o: OStream &,
		n: T! #&,
		minDigits: U1,
		prefix: BOOL
	) VOID
	{
		v: UM := n;

		neg: BOOL;
		IF(n < <T>(0))
		{
			neg := TRUE;
			IF(~n) // If -max, ignore value.
				v := -n;
		}

		buffer: CHAR[32] (NOINIT);
		buf: CHAR-Buffer(buffer, ##buffer);

		len ::= 0;
		IF(neg)
			buf[len++] := '-';

		IF(prefix) {
			buf[len++] := '0';
			buf[len++] := 'x';
		}
		printed ::= FALSE;
		FOR(bit ::= 2*SIZEOF(T); bit--;)
		{
			nibble: U1# := (v>>(bit<<2)) & 0xf;
			IF(nibble || printed || bit < minDigits)
			{
				buf[len++] := "0123456789abcdef"[nibble];
				printed := TRUE;
			}
		}

		IF(!printed)
			buf[len++] := '0';

		write ::= buf.cut(len);
		o.write(write.Data, write.Size);
	}

	[T:TYPE] dec(o: OStream &, n: T! #&) VOID
	{
		v: UM := n;
		neg: BOOL;
		IF(n < <T>(0))
		{
			neg := TRUE;
			IF(~n)
				v := -n;
		}

		buffer: CHAR[32] (NOINIT);
		buf: CHAR-Buffer(buffer, ##buffer);
		i ::= buf.Size-1;
		DO()
		{
			d ::= v % 10;
			v := v / 10;

			buf[i] := '0'+d;
		} FOR(v; i--)

		IF(neg)
			buf[--i] := '-';

		write ::= buf.drop_start(i);
		o.write(write.Data, write.Size);
	}
}