(/rl/)

INCLUDE 'std/types'
INCLUDE 'std/memory'
INCLUDE 'std/string'

::std::io
{
	CONCEPT OStream
	{
		write_some(data: VOID #\, size: UM) UM;

		write(data: VOID #\, size: UM) UM
		{
			p ::= <char#\>(data);
			FOR(left ::= size; left > 0;)
			{
				written ::= write_some(p, left);
				left := left - written;
				p := p + written;
			}
			RETURN size;
		}

		write_some(str: char #\) UM
			:= write_some(str, str::len(str));
		write(str: char #\) UM
			:= write(str, str::len(str));

		write_some(ch: char) UM
			:= write_some(&ch, 1);
		write(ch: char) UM
			:= write(&ch, 1);

		[T: TYPE]
		write_some(buf: [T!]Buffer #&) INLINE UM
			:= write_some(buf.Data, buf.Size * SIZEOF(T));

		[T: TYPE]
		write(buf: [T!]Buffer #&) INLINE UM
			:= write(buf.Data, buf.Size * SIZEOF(T));
	}

	CONCEPT IStream
	{
		read(data: VOID \, size: UM) UM;

		read() char
		{
			c: char;
			read(&c, 1);
			RETURN c;
		}
	}
}