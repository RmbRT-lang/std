(/rl/)

INCLUDE 'std/types'
INCLUDE 'std/memory'
INCLUDE 'std/string'

::std::io
{
	MASK OStream
	{
		write_some(data: VOID #\, size: UM) UM;

		write(data: VOID #\, size: UM) UM
		{
			p ::= <CHAR#\>(data);
			FOR(left ::= size; left > 0;)
			{
				written ::= write_some(p, left);
				left := left - written;
				p := p + written;
			}
			RETURN size;
		}

		write_some(str: CHAR #\) UM
			:= write_some(str, str::len(str));
		write(str: CHAR #\) UM
			:= write(str, str::len(str));

		write_some(ch: CHAR) UM
			:= write_some(&ch, 1);
		write(ch: CHAR) UM
			:= write(&ch, 1);

		[T: TYPE]
		write_some(buf: [T!]Buffer #&) INLINE UM
			:= write_some(buf.Data, buf.Size * SIZEOF(T));

		[T: TYPE]
		write(buf: [T!]Buffer #&) INLINE UM
			:= write(buf.Data, buf.Size * SIZEOF(T));

		PRIVATE write_all() INLINE ::= 0;
		[A0: TYPE; A...: TYPE]
		write_all(a0: A0!&&, a: A!&&...) UM
			:= write(<A0!&&>(a0)) + write_all(<A!&&>(a)...);
	}

	MASK IStream
	{
		read(data: VOID \, size: UM) UM;

		read() CHAR
		{
			c: CHAR;
			read(&c, 1);
			RETURN c;
		}
	}
}