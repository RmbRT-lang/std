(/rl/)

::std::io
{
	MASK OStream
	{
		write_some(data: VOID #\, size: UM) UM;

		write(
			data: VOID #\,
			bytes: UM) VOID
		{
			p ::= <CHAR#\>(data);
			WHILE(bytes > 0)
			{
				written ::= THIS.write_some(p, bytes);
				bytes -= written;
				p += written;
			}
		}

		[Args...:TYPE] THIS(a:Args!&&...) THIS&
		{
			std::io::write(THIS, <Args!&&>(a)...);
			= THIS;
		}
	}

	StreamOutput
	{
		Data: VOID \;
		Bytes: UM;

		[T: TYPE]
		:buf
		{
			slice: T! \,
			count: UM
		} INLINE:
			Data(slice),
			Bytes(count * SIZEOF(T));

		:ch{c: CHAR &} INLINE: Data(&c), Bytes(1);

		{data: VOID *, bytes: UM}:
			Data(data), Bytes(bytes);
	}

	MASK IStream
	{
		read_some(data: VOID \, size: UM) UM;

		eof() BOOL;

		read(o: StreamOutput) VOID
		{
			p ::= <U1 \>(o.Data);
			WHILE(o.Bytes)
			{
				n ::= THIS.read_some(p, o.Bytes);
				p += n;
				o.Bytes -= n;
			}
		}

		read_byte() CHAR
		{
			c: CHAR;
			THIS.read_some(&c, 1);
			= c;
		}
	}
}