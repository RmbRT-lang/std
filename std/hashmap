(/rl/)
INCLUDE 'std/dyn'
INCLUDE 'std/map'
INCLUDE 'std/hash'

::std [K:TYPE; V:TYPE] HashMap
{
	PRIVATE Map: std::[Hash, V]Map;

	TYPE Location := std::[Hash, V]Map::Location;

	#? find(k: K! #&) V! #?* -- := find_h(hash(k));
	#? find_loc(k: K! #&) {V! #?*, Location} -- := find_loc_h(hash(k));
	#? find_loc2(k: K! #&, loc: Location \) V! #?* -- := find_loc2_h(hash(k), loc);

	#? find_h(k: Hash #&) V! #?* -- := Map.find(k);
	#? find_loc_h(k: Hash #&) {V! #?*, Location} -- := Map.find_loc(k);
	#? find_loc2_h(k: Hash #&, loc: Location \) V! #?* -- := Map.find_loc2(k, loc);

	[Value: TYPE]
	insert(k: K! #&, v: Value!&&) BOOL := Map.insert(hash(k), <Value!&&>(v));

	[Value: TYPE]
	insert_h(k: Hash #&, v: Value!&&) BOOL := Map.insert(k, <Value!&&>(v));

	remove(k: K! #&) BOOL -- := remove_h(hash(k));
	pop(k: K! #&, deleted: V! \) BOOL := pop_h(hash(k), deleted);

	remove_h(k: Hash #&) BOOL -- := Map.remove(k);
	pop_h(k: Hash #&, deleted: V! \) BOOL -- := Map.pop(k, deleted);

	#? start() ? -- := Map.start();
	#? end() ? -- := Map.end();
	# empty() BOOL -- := Map.empty();
}

::std [K:TYPE; V:TYPE] TYPE DynHashMap := [K!; V!-std::Dyn]HashMap;