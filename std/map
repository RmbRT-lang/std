(/rl/)

INCLUDE 'std/set'


::std [K:TYPE; V:TYPE] Pair
{
	Key: K;
	Value: V;

	{...};

	# |THIS ? := (Key, Value);

	[T:TYPE]
	# THIS <>(rhs: T!&&) S1 := Key <> <T!&&>(rhs);
}

::std [K:TYPE; V:TYPE] Map
{

	PRIVATE Set: [[K!;V!]Pair]VecSet;

	TYPE Location := [[K!;V!]Pair]VecSet::Location;

	{};
	:reserve{cap: UM}: Set := :reserve(cap);

	[T: TYPE]
	#? find_loc(k: T! #?&) {V! #?-OptRef, Location}
	{
		x ::= Set.find_loc(k);
		IF(x.(0))
			= (&x.(0)->Value, x.(1));
		ELSE
			= (NULL, x.(1));
	}

	[T:TYPE]
	#? find_loc2(k: T! #?&, loc: Location \) V! #?-OptRef
	{
		IF(it ::= Set.find_loc2(k, loc))
			= &it->Value;
		ELSE
			= NULL;
	}

	[T:TYPE]
	#? find(k: T! #&) V! #?-OptRef
	{
		dummy: Location;
		= find_loc2(k, &dummy);
	}

	[T:TYPE]
	#? THIS[k: T! #&] V! #?-OptRef -- := find(k);

	# find_entry(k: K#&) [K!;V!]Pair# -OptRef
	{
		dummy: Location;
		= Set.find_loc2(k, &dummy);
	}

	[Key:TYPE]
	#? find_entry_loc2(k: Key!&&, loc: Location \) [K!;V!]Pair#? -OptRef
		:= Set.find_loc2(<Key!&&>(k), loc);

	[Key: TYPE; Value: TYPE]
	insert(k: Key!&&, v: Value!&&) BOOL
	{
		loc: Location;
		IF(find_loc2(k, &loc))
			= FALSE;
		Set.emplace_at(loc, <Key!&&>(k), <Value!&&>(v));
		= TRUE;
	}

	[Key: TYPE; Val...: TYPE]
	ensure_entry(k: Key!&&, v: Val!&&...) [K!;V!]Pair &
	{
		loc: Location;
		IF(exists ::= Set.find_loc2(k, &loc))
			= *exists;
		= Set.emplace_at(loc, <Key!&&>(k), <Val!&&>(v)...);
	}

	[Key: TYPE; Val...: TYPE]
	ensure(k: Key!&&, v: Val!&&...) V! &
		:= ensure_entry(<Key!&&>(k), (<Val!&&>(v)...)).Value;

	[Key: TYPE; Value: TYPE]
	insert_at(loc: Location, k: Key!&&, v: Value!&&) V! &
		:= insert_entry_at(loc, <Key!&&>(k), <Value!&&>(v)).Value;

	[Key: TYPE; Value: TYPE]
	insert_entry_at(loc: Location, k: Key!&&, v: Value!&&) [K!;V!]Pair &
		:= Set.emplace_at(loc, <Key!&&>(k), <Value!&&>(v));

	[T:TYPE]
	remove(k: T! #&) BOOL -- := Set.remove(k);
	[T:TYPE]
	pop(k: T! #&, deleted: V! \) BOOL
	{
		loc: Location;
		IF(it ::= find_loc2(k, &loc))
		{
			*deleted := &&*it;
			Set.remove_at(loc);
			= TRUE;
		}
		= FALSE;
	}

	remove_at(l: Location) VOID -- { Set.remove_at(l); }

	#? start() ? -- := Set.start();
	#? end() ? -- := Set.end();
	# empty() BOOL -- := Set.empty();
	#? at_loc(l: Location) {K!,V!}#? * -- := Set.at_loc(l);

	# THIS <> (rhs: THIS #&) S1 := Set <> rhs.Set;

	# ## THIS ? -- := ##Set;
}

::std [K:TYPE; V:TYPE] TYPE DynMap := [K!; V!-std::Dyn]Map;
::std [K:TYPE; V:TYPE] TYPE SharedMap := [K!; V!-std::Shared]Map;
::std [K:TYPE; V:TYPE] TYPE ValMap := [K!; V!-std::Val]Map;