(/rl/)

INCLUDE 'std/set'

::std [K:TYPE; V:TYPE] Map
{
	PRIVATE Pair
	{
		Key: K;
		Value: V;

		{...};

		# |THIS ? := (Key, Value);

		[T:TYPE]
		# THIS <>(rhs: T!&&) S1 := Key <> <T!&&>(rhs);
	}

	PRIVATE Set: [Pair]VecSet;

	TYPE Location := [Pair]VecSet::Location;

	[T: TYPE]
	#? find_loc(k: T! #?&) {V! #?-OptRef, Location}
	{
		x ::= Set.find_loc(k);
		IF(x.(0))
			= (&x.(0)->Value, x.(1));
		ELSE
			= (NULL, x.(1));
	}

	[T:TYPE]
	#? find_loc2(k: T! #?&, loc: Location \) V! #?-OptRef
	{
		IF(it ::= Set.find_loc2(k, loc))
			= &it->Value;
		ELSE
			= NULL;
	}

	[T:TYPE]
	#? find(k: T! #&) V! #?-OptRef
	{
		dummy: Location;
		= find_loc2(k, &dummy);
	}

	[Key: TYPE; Value: TYPE]
	insert(k: Key!&&, v: Value!&&) BOOL
	{
		loc: Location;
		IF(find_loc2(k, &loc))
			= FALSE;
		Set.emplace_at(loc, (<Key!&&>(k), <Value!&&>(v)));
		= TRUE;
	}

	[Key: TYPE; Value: TYPE]
	insert_at(loc: Location, k: Key!&&, v: Value!&&) VOID
	{
		Set.emplace_at(loc, (<Key!&&>(k), <Value!&&>(v)));
	}

	[T:TYPE]
	remove(k: T! #&) BOOL INLINE := Set.remove(k);
	[T:TYPE]
	pop(k: T! #&, deleted: V! \) BOOL
	{
		loc: Location;
		IF(it ::= find_loc2(k, &loc))
		{
			*deleted := &&*it;
			Set.remove_at(loc);
			= TRUE;
		}
		= FALSE;
	}

	#? start() ? INLINE := Set.start();
	#? end() ? INLINE := Set.end();
	# empty() BOOL INLINE := Set.empty();
	#? at_loc(l: Location) {K!,V!}#? * INLINE := Set.at_loc(l);

	# ## THIS ? INLINE := ##Set;
}

::std [K:TYPE; V:TYPE] TYPE DynMap := [K!; V!-std::Dyn]Map;