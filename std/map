(/rl/)

INCLUDE 'std/pair'
INCLUDE 'std/tree'

::std [K: TYPE, V: TYPE, Cmp: TYPE] TreeMap
{
	PRIVATE PairCmp
	{
		STATIC cmp(
			lhs: K!#&,
			rhs: [K!,V!]Pair#&
		) INLINE int :=
			Cmp::cmp(lhs, rhs.First);
	}

	PRIVATE TYPE Tree := [[K!,V!]Pair, PairCmp!]BinaryTree;
	TYPE Location := detail::binary_tree::[[K!, V!]Pair]Location;

	Values: Tree;

	[Key: TYPE]
	# find(
		key: Key! #&,
		location: Location \
	) V #*
	{
		IF(p ::= Values.find(key, location))
			RETURN &p->Second;
		RETURN NULL;
	}

	[Key: TYPE]
	find(
		key: Key! #&,
		location: Location \
	) V *
	{
		IF(p ::= Values.find(key, location))
			RETURN &p->Second;
		RETURN NULL;
	}

	get(key: K #&) V! &
	{
		l: Location;
		IF(v ::= find(key, &l))
			RETURN *v;
		ELSE
		{
			entry ::= Values.insert_at(l);
			entry->First := key;
			RETURN entry->Second;
		}
	}

	# try_get(key: K#&) V! * := Values.find(key);
}

::std::detail::tree_map
{
	[K: TYPE, V: TYPE, Cmp: TYPE]
	TYPE Map := [[K!,V!]Pair, Cmp!]BinaryTree;
	[K: TYPE, V: TYPE]
	TYPE Location := binary_tree::[[K!,V!]Pair]Location;
}