(/rl/)

INCLUDE 'std/heap'

::std [T:TYPE] Dyn
{
	Ptr: T! *;

	{}: Ptr(NULL);
	{NULL}: Ptr(NULL);
	{BARE} ();

	{&&m}: Ptr(m.release());

	:gc{p: T! *}: Ptr(p);

	[Args...: TYPE]
	:new{args: Args!&&...}:
		Ptr(heap::[T]new(<Args!&&>(args)...));

	[V:TYPE]
	:dup{v: V!&&}:
		Ptr(heap::[V]new(<V!&&>(v)));

	[V:TYPE] {m: V!-Dyn &&}
	{
		IF(m)
		{
			// Try to convert into our pointer type, this might fail.
			Ptr := <<T \>>(m!);
			m.{};
		}
		ELSE
			Ptr := NULL;
	}

	# <T! \> INLINE := Ptr;
	# *THIS T! & INLINE := *Ptr;
	# THIS! T! * INLINE := Ptr;

	release() T! *
	{
		p ::= Ptr;
		Ptr := NULL;
		= p;
	}

	DESTRUCTOR
	{
		IF(Ptr)
			heap::delete(Ptr);
	}
}