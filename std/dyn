(/rl/)

INCLUDE 'std/heap'

(// Optionally heap-allocated value.
	Access the value via `*`, `->`, `!`, or `()`. /)
::std [T:TYPE] DynOpt
{
	PRIVATE Ptr: T! *;

	{}: Ptr(NULL);
	{NULL}: Ptr(NULL);
	{BARE} ();

	{&&m}: Ptr(m.release());
	{#&c}: Ptr := c.Ptr ?? heap::clone_virtual_p(c.Ptr) : NULL;

	:gc{p: T! *}: Ptr(p);

	[Args...: TYPE]
	:a{args: Args!&&...} := :a.T(<Args!&&>(args)...);

	[U: TYPE; Args...: TYPE]
	:a.U!{args: Args!&&...}:
		Ptr := heap::[U]new(<Args!&&>(args)...);

	[Arg: TYPE]
	:if{if: BOOL, then: Arg!&&}:
		Ptr := if ?? heap::[T]new(<Arg!&&>(then)) : NULL;

	[Args...: TYPE]
	:make{args: Args!&&...}
		(<<<T>>>(<Args!&&>(args)...));
	[Args...: TYPE]
	:gcmake{args: Args!&&...}:
		Ptr := <<<T>>>(<Args!&&>(args)...);


	[Args...: TYPE]
	:make_if{if: BOOL, args: Args!&&...}:
		Ptr := NOINIT
	{
		IF(if)
			THIS.{<<<T>>>(<Args!&&>(args)...)};
		ELSE
			Ptr := NULL;
	}

	[Args...: TYPE]
	:gcmake_if{if: BOOL, args: Args!&&...}:
		Ptr := if ?? <<<T>>>(<Args!&&>(args)...) : NULL;

	[V:TYPE]
	:dup{v: V!&&} := :gc(>>heap::clone_virtual_v(<V!&&>(v)));

	[V:TYPE] {m: V!-DynOpt! &&}:
		Ptr := <T *>(m.ptr())
	{
		m.{};
	}

	[V:TYPE] :<>{m: V!-DynOpt! &&}
	{
		IF(m)
		{
			// Try to convert into our pointer type, this might fail.
			Ptr := <<T \>>(m.ptr());
			m.{};
		}
		ELSE
			Ptr := NULL;
	}

	# <T! *> -- := Ptr;

	# *THIS T! & -- { ASSERT(Ptr); = *Ptr; }
	# THIS! T! & -- := *THIS;
	# THIS() T! & -- := *THIS;

	# ok() T! & -- := *Ptr;
	# ptr() T! * -- := Ptr;

	release() T! *
	{
		p ::= Ptr;
		Ptr := NULL;
		= p;
	}

	[Args...: TYPE]
	ensure(args: Args!&&...) T! & --
	{
		IF(!Ptr)
			Ptr := heap::[T]new(<Args!&&>(args)...);
		= *Ptr;
	}

	# THIS<>(rhs: T! # \) S1
	{
		IF(!THIS) = rhs ?? -1 : 0;
		IF(!rhs) = 1;

		= *THIS <> *rhs;
	}

	DESTRUCTOR
	{
		IF(Ptr)
			heap::delete(Ptr);
	}
}

(// Behaves like a normal instance but is placed on the heap.
	Copying creates an allocated copy, but moving will just transfer ownership of the pointer. After moving, the object's value is invalid until re-initialised. Use `*`, `->`, `!` or `()` to access the object's value. `BARE` initialisation will not allocate an instance. /)
::std [T:TYPE] Dyn -> std::[T]DynOpt
{
	{} -- -> (:a());
	{BARE} -- -> (NULL);
	{#&};
	{&&};

	[V:TYPE] :<>{m: V!-Dyn! &&} -> (:<>, &&m) { ASSERT(valid()); }
	[V:TYPE] :!{m: V!-DynOpt! &&} -> (&&m) { ASSERT(valid()); }

	[U: TYPE] :gc{p: U! \} -> (:gc, p) { ASSERT(p); }

	[Args...: TYPE]
	:make{args: Args!&&...} -> (:make, <Args!&&>(args)...);
	[Args...: TYPE]
	:gcmake{args: Args!&&...} -> (:gcmake, <Args!&&>(args)...);

	[V:TYPE]
	:dup{v: V!&&} -> (:dup, <V!&&>(v));

	[U: TYPE; Args...: TYPE]
	:a.U!{args: Args!&&...} -> (:a.U!(<Args!&&>(args)...));

	[Args...:TYPE]
	{args: Args!&&...} -- -> (:a(<Args!&&>(args)...));

	[Args...:TYPE]
	:a{args: Args!&&...} -- -> (:a(<Args!&&>(args)...));

	# <T! *> -- := <std::[T]DynOpt#&>(THIS);

	# *THIS T! & -- := THIS.ok();
	# THIS! T! & -- := *THIS;
	# THIS() T! & -- := *THIS;

	/// Detect invalid state after moving. If invalid, any operation besides checking validity is forbidden.
	# valid() BOOL -- := THIS;

	# THIS<>(rhs: T! # \) S1 := THIS() <> *rhs;
}