(/rl/)

INCLUDE 'std/io/format'
INCLUDE 'std/io/stream'

::std
{
	MASK CustomHashable { # hash(Hasher &) VOID; }

	Hash -> CustomHashable
	{
		TYPE Word := U8;
		TYPE WordAsSigned := S8;
		Words: Word[2];

		{}: Words(NOINIT)
		{
			FOR(i ::= 0; i < ##Words; i++)
				Words[i] := 0;
		}

		:seed{}: Words(NOINIT)
		{
			Words[0] := 0x239f0707ec07cf21;
			IF(##Words > 1) Words[1] := 0x40784b4fb373e78f;
			IF(##Words > 2) Words[2] := 0x9c0409cf334c870e;
			IF(##Words > 3) Words[3] := 0x404af6c9501b28ce;
			IF(##Words > 4) Words[4] := 0x50aee47b8102ddca;
			IF(##Words > 5) Words[5] := 0x1ee048f480885612;
			IF(##Words > 6) Words[6] := 0xd88abd832cf1a7b1;
			IF(##Words > 7) Words[7] := 0xb6dbd7705837458a;
		}

		# THIS==(rhs: Hash#&) BOOL
		{
			FOR(i ::= 0; i < ##Words; i++)
				IF(Words[i] != rhs.Words[i])
					= FALSE;
			= TRUE;
		}
		# THIS!=(rhs: Hash#&) BOOL INLINE := !(THIS == rhs);

		# THIS<>(rhs: Hash#&) S1
		{
			FOR(i ::= 0; i < ##Words; i++)
				IF(unequal ::= Words[i] <> rhs.Words[i])
					= unequal;
			= 0;
		}

		# stream(into: io::OStream &) VOID
		{
			FOR(i ::= 0; i < ##Words; i++)
				io::format::hex(into, Words[i], 2 * SIZEOF(Word), !i);
		}

		# stream_noprefix(into: io::OStream &) VOID
		{
			FOR(i ::= 0; i < ##Words; i++)
				io::format::hex(into, Words[i], 2 * SIZEOF(Word), FALSE);
		}

		# hash(h: std::Hasher &) VOID
		{
			FOR(i ::= 0; i < ##Words; i++)
				h(Words[i]);
		}
	}

	[T...: TYPE]
	hash(v: T! &&...) Hash! INLINE
	{
		h: Hasher;
		h(<T!&&>(v))...;
		= h++;
	}

	Hasher
	{
		PRIVATE Accum: Hash;
		PRIVATE WordAcc: Hash::Word;
		PRIVATE WordAccSize: U1;
		PRIVATE Current: U1;
		PRIVATE Digested: BOOL;

		{}: Accum(:seed), WordAcc(0), WordAccSize(0), Current(0), Digested(FALSE);

		THIS++ Hash #&
		{
			IF(!Digested)
			{
				Digested := TRUE;
				IF(WordAccSize)
				{
					applyWord(WordAcc, (WordAccSize+7) >> 3);
					WordAccSize := 0;
				}
				IF(Current) {
					applyWord(Current, SIZEOF(#Current));
				}
			}
			= Accum;
		}

		[T:TYPE] THIS(v:T! #&) Hasher&
		{
			IF(h ::= <<CustomHashable #*>>(&v))
				h->hash(THIS);
			ELSE
				_hash(v!);
			= THIS;
		}

		[T:TYPE] PRIVATE _hash(v: T!#&) VOID
		{
			TYPE SWITCH STATIC(v)
			{
			BOOL:
				accum(v ?? 1 : 0, 8);
			U1, S1, U2, S2, U4, S4, U8, S8, CHAR:
				accum(v, 8*SIZEOF(T));
			DEFAULT:
			{
				IF(h ::= <<CustomHashable #*>>(&v))
					h->hash(THIS);
				ELSE
					THIS VISIT(v!);
			}
			}
		}

		PRIVATE accum(v: Hash::Word, bits: U1) Hasher &
		{
			WordAcc ^= <Hash::Word>(v) << WordAccSize;
			WordAccSize += bits;
			IF(WordAccSize >= 8 * SIZEOF(Hash::Word))
			{
				applyWord(WordAcc, (SIZEOF(Hash::Word)));
				WordAccSize -= 8 * SIZEOF(Hash::Word);
				WordAcc := v >> (bits - WordAccSize);
			}
			= THIS;
		}

		PRIVATE applyWord(v: Hash::Word, size: U1) Hasher&
		{
			STATIC WordBits # ::= SIZEOF(Hash::Word) * 8;
			STATIC WordMask # ::= WordBits-1;
			shl # ::= v & (SIZEOF(Hash::Word) * 8 - 1);
			shr # ::= SIZEOF(Hash::Word) * 8 - shl;
			currentTwist #::= Current ^ (Current >> (Current &7));
			target: U1 := <U1>(Current) & <U1>(##Accum.Words-1);
			prev: U1 := <U1>(Current-1) & <U1>(##Accum.Words-1);
			FOR(i ::= 0; i < ##Accum.Words; i++)
			{
				next: U1 # := <U1>(Current+i+1) & <U1>(##Accum.Words-1);
				vSwitch # ::= -<Hash::WordAsSigned>((currentTwist ^ v) &1);

				Accum.Words[target] ^= (v ^ <Hash::Word>(vSwitch))
					^ (Accum.Words[next] << shl)
					^ ~(Accum.Words[prev] >> shr);
				v += Accum.Words[target];

				prev := target;
				target := next;
			}
			Current += size;
			= THIS;
		}
	}
}