(/rl/)

INCLUDE 'std/io/format'
INCLUDE 'std/io/stream'
INCLUDE 'std/hashable'

::std
{
	MASK CustomHashable { # hash(Hasher &) VOID; }

	Hash -> CustomHashable0Cost
	{
		TYPE Word := U8;
		TYPE WordAsSigned := S8;
		Words: Word[1];

		{};

		:seed{}: Words(NOINIT)
		{
			Words[0] := 0x239f0707ec07cf21;
			IF(##Words > 1) Words[1] := 0x40784b4fb373e78f;
			IF(##Words > 2) Words[2] := 0x9c0409cf334c870e;
			IF(##Words > 3) Words[3] := 0x404af6c9501b28ce;
			IF(##Words > 4) Words[4] := 0x50aee47b8102ddca;
			IF(##Words > 5) Words[5] := 0x1ee048f480885612;
			IF(##Words > 6) Words[6] := 0xd88abd832cf1a7b1;
			IF(##Words > 7) Words[7] := 0xb6dbd7705837458a;
		}

		# THIS==(rhs: Hash#&) BOOL
		{
			FOR(i ::= 0; i < ##Words; i++)
				IF(Words[i] != rhs.Words[i])
					= FALSE;
			= TRUE;
		}
		# THIS!=(rhs: Hash#&) BOOL INLINE := !(THIS == rhs);

		# THIS<>(rhs: Hash#&) S1
		{
			FOR(i ::= 0; i < ##Words; i++)
				IF(unequal ::= Words[i] <> rhs.Words[i])
					= unequal;
			= 0;
		}

		# stream(into: io::OStream &) VOID
		{
			FOR(i ::= 0; i < ##Words; i++)
				io::format::hex(into, Words[i], 2 * SIZEOF(Word), !i);
		}

		# stream_noprefix(into: io::OStream &) VOID
		{
			FOR(i ::= 0; i < ##Words; i++)
				io::format::hex(into, Words[i], 2 * SIZEOF(Word), FALSE);
		}

		# hash(h: std::Hasher &) VOID
		{
			FOR(i ::= 0; i < ##Words; i++)
				h(Words[i]);
		}
	}

	[T...: TYPE]
	hash(v: T! &&...) Hash! INLINE
	{
		h: Hasher;
		h(<T!&&>(v))...;
		= h++;
	}

	Hasher
	{
		PRIVATE Accum: Hash;
		PRIVATE WordAcc: Hash::Word[4];
		PRIVATE WordAccSize: U1;
		PRIVATE Current: U4;
		PRIVATE Digested: BOOL;

		{}: Accum(:seed), WordAccSize(0), Current(0), Digested(FALSE);

		THIS++ Hash #& INLINE
		{
			IF(!Digested)
			{
				Digested := TRUE;
				IF(Current | WordAccSize)
				{
					WordAcc[##WordAcc-1] ^= Current | (WordAccSize<<8);
					applyWords();
				}
			}
			= Accum;
		}

		[T:TYPE; T_...:TYPE] THIS(v:T! #&, v_: T_!#&...) Hasher& INLINE
		{
			_hash(v);
			_hash(v_)...;
			= THIS;
		}

		[T:TYPE] PRIVATE _hash(v: T!#&) VOID INLINE
		{
			TYPE SWITCH STATIC(v)
			{
			BOOL:
				accum(v ?? 1 : 0, 1);
			U1, S1, U2, S2, U4, S4, U8, S8, CHAR:
				accum(v, 8 * SIZEOF(T));
			DEFAULT:
			{
				IF(h ::= <<CustomHashable0Cost #*>>(&v))
					<<<CustomHashable>>>(&v).hash(THIS);
				ELSE
				{
					x: ?#& := v!;
					TYPE SWITCH STATIC(x)
					{
					BOOL, U1, S1, U2, S2, U4, S4, U8, S8, CHAR:
						_hash(v!);
					DEFAULT:
						IF(h ::= <<CustomHashable0Cost #*>>(&x))
							<<<CustomHashable>>>(&x).hash(THIS);
						ELSE
							THIS VISIT(x);
					}
				}
			}
			}
		}

		PRIVATE accum(v: Hash::Word, bits: U1) VOID INLINE
		{
			WordAcc[Current & (##WordAcc-1)] ^= v << WordAccSize;
			WordAccSize += bits;
			IF(WordAccSize >= 8*SIZEOF(Hash::Word))
			{
				++Current;
				IF!(Current& (##WordAcc-1))
				{
					applyWords();
				}

				WordAcc[Current & (##WordAcc-1)] := v >> (WordAccSize - 8*SIZEOF(Hash::Word));
				WordAccSize -= 8*SIZEOF(Hash::Word);
			}
		}

		PRIVATE applyWords() VOID INLINE
		{
			STATIC off0: Hash::Word# := 0xb9ca57f290b356cb;
			STATIC off1: Hash::Word# := 0x3eb8ad5945662260;
			STATIC offsets: Hash::Word #[] (
				off0,
				off0 * off1 ^ 0x324567,
				off0 ^ off1 + 0x69f58509,
				off1
			);

			FOR(i ::= 0; i < ##WordAcc; i++)
			{
				w: ?#& := Accum.Words[i & (##Accum.Words-1)];
				acc: ?& := WordAcc[i];

				acc += offsets[i];
				acc := acc * (
					(acc << (SIZEOF(Hash::Word) * 4))
					| (acc >> (SIZEOF(Hash::Word) * 4))
				);
				acc := (acc << (SIZEOF(Hash::Word) * 4))
					| (acc >> (SIZEOF(Hash::Word) * 4));
				rotlW ::= w <<< (acc & (SIZEOF(Hash::Word)*8-1));
				acc := acc * rotlW ^ acc;
			}
			FOR(i ::= 0; i < ##WordAcc; i++)
			{
				w: ?& := Accum.Words[i & (##Accum.Words-1)];
				acc: ?& := WordAcc[i];

				w ^= acc;
				acc := 0;
			}
		}
	}
}