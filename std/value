(/rl/)

INCLUDE 'std/shared'
INCLUDE 'std/hash'

/// shared value type with copy-on-write semantics.
::std [T:TYPE] Val -> PRIVATE [T]Shared, CustomHashable0Cost
{
	[A...:TYPE] { a: A!&&... } -> (<A!&&>(a)...), ();
	[A...:TYPE] :a{ a: A!&&... } -> (:a, <A!&&>(a)...), ();
	[U:TYPE; A...:TYPE] :a.U!{ a: A!&&... } -> (:a.U!, <A!&&>(a)...), ();
	[A...:TYPE] :make{ a: A!&&... } -> (&&<<<T>>>(<A!&&>(a)...).shared()), ();
	[A...:TYPE] :dyn_make{ a: A!&&... } -> (:share, (:make, <A!&&>(a)...)), ();
	[U:TYPE] :dup{ a: U!&& } -> (:dup, <U!&&>(a)), ();

	[U:TYPE] :<>{v: U!-Val} -> (:<>, &&v.shared()), ();
	[U:TYPE] :gc{p: U! \} -> (:gc, p), ();

	:from_shared{s: [T]Shared} -> (&&s), ();

	{BARE} -> (BARE), ();
	{};
	{#&cpy} -> (cpy.shared()), ();
	{&&mv} -> (&&mv.shared()), ();

	[U:TYPE] :!{v: [U!]ValOpt} -> (:!, &&v.shared()), ();

	# *THIS T #& --  := *<[T]Shared #&>(THIS);
	# THIS! T #& -- := *THIS;
	# <BOOL> -- := <[T]SharedOpt#&>(THIS);
	# <T #\> -- := ptr();

	# THIS <>(rhs: T#\) S1 := ptr() <> rhs;

	#? shared() [T]Shared #? & -- := ->([T]Shared);


	# ptr() T #\ -- := <[T]Shared #&>(THIS).ptr();

	mut() T & -- := *mut_ptr();
	mut_ok() T & -- := *<[T]Shared &>(THIS).ptr();

	mut_ptr() T * --
	{
		<[T]Shared &>(THIS).clone_if_shared();
		= <[T]Shared &>(THIS).ptr();
	}
	mut_ptr_ok() T * -- := <[T]Shared &>(THIS).ptr();

	# hash(h: std::Hasher &) VOID { h(<UM>(ptr())); }
}

::std [T:TYPE] ValOpt -> PRIVATE [T]SharedOpt, CustomHashable0Cost
{
	[A...:TYPE] :a{ a: A!&&... } -> (:a, <A!&&>(a)...), ();
	[A...:TYPE] :if{ if: BOOL, a: A!&&... } -> (:if, if, <A!&&>(a)...), ();
	[U:TYPE; A...:TYPE] :a.U!{ a: A!&&... } -> (:a.U!, <A!&&>(a)...), ();
	[A...:TYPE] :make{ a: A!&&... } := <<<T>>>(<A!&&>(a)...);
	
	[A...:TYPE] :make_if{ if: BOOL,  a: A!&&... }
	{ IF(if) THIS := <<<T>>>(<A!&&>(a)...); }
	
	[A:TYPE] :dup{ a: A!&& } -> (:dup, <A!&&>(a)), ();
	[U:TYPE] { v: [U!]ValOpt } -> (&&v.shared()), ();
	[U:TYPE] :<>{v: U!-ValOpt} -> (:<>, &&v.shared()), ();
	[U:TYPE] :cast_val{ v: [U!]Val } -> (:<>, &&v.shared()), ();
	:gc{p: T! *} -> (:gc, p), ();
	{NULL} -> (NULL), ();

	{BARE} -> (BARE), ();
	{};
	{#&cpy} -> (cpy), ();
	{&&mv} -> (&&mv), ();

	{v: [T]Val} -> (&&v.shared()), ();

	# *THIS T #& --  := *<[T]SharedOpt #&>(THIS);
	# THIS! T #& -- := *THIS;

	# ptr() T #* -- := <[T]SharedOpt #&>(THIS).ptr();
	# ok() T #& -- := *ptr();

	# <T #*> -- := ptr();
	# <BOOL> -- := <[T]SharedOpt#&>(THIS);

	# THIS <>(rhs: T#\) S1 := ptr() <> rhs;

	#? shared() [T]SharedOpt #? & -- := ->([T]SharedOpt);


	mut() T & -- := *mut_ptr();
	mut_ok() T & -- := *<[T]SharedOpt &>(THIS).ptr();

	mut_ptr() T * --
	{
		ASSERT(THIS);
		<[T]SharedOpt &>(THIS).clone_if_shared();
		= <[T]SharedOpt &>(THIS).ptr();
	}
	mut_ptr_ok() T * -- := <[T]SharedOpt &>(THIS).ptr();

	# hash(h: std::Hasher &) VOID { h(<UM>(ptr())); }
}