(/rl/)

INCLUDE 'std/error'
INCLUDE 'std/io/stream'
INCLUDE 'std/math/unsigned'

::std::math Overflow -> Error
{
	# OVERRIDE print(o: io::OStream &) VOID
	{
		o.write("overflow/underflow");
	}
}

::std::math ZeroDiv -> Error
{
	# OVERRIDE print(o: io::OStream &) VOID
	{
		o.write("division by 0");
	}
}

::std::math::safe
{
	[T:TYPE] add(lhs: T! #&, rhs: T! #&, carry: BOOL &) INLINE T
	{
		ret: T := unsigned(lhs) + unsigned(rhs);
		carry := unsigned(ret) < lhs;
		RETURN ret;
	}

	[T:TYPE] add(lhs: T! #&, rhs: T! #&) INLINE T
	{
		carry: BOOL;
		ret ::= add(lhs, rhs, carry);
		IF(carry)
			THROW <Overflow>();
		RETURN ret;
	}

	[T: TYPE] mul(lhs: T! #&, rhs: T! #&, carry: BOOL &) INLINE T
	{
		carry := rhs && unsigned(lhs) > unsigned(~<T>(0)) / unsigned(rhs);
		RETURN unsigned(lhs) * unsigned(rhs);
	}

	[T: TYPE] mul(lhs: T! #&, rhs: T! #&) INLINE T
	{
		carry: BOOL;
		ret ::= mul(lhs, rhs, carry);
		IF(carry)
			THROW <Overflow>();
		RETURN ret;
	}

	[T: TYPE] neg(x: T! #&) INLINE T
	{
		IF(unsigned(x) << 1 == 0)
			THROW <Overflow>();
		RETURN -x;
	}

	(/[T:TYPE]
	Int
	{
		PRIVATE V: T;

		{};
		{v: T #&}: V(v);
		{v: T &&}: V(v);

		# -THIS [T]Int := neg(V);
		# +THIS [T]Int #& := THIS;

		# THIS+(rhs: T#&) [T]Int := add(V, rhs);
		# THIS-(rhs: T#&) [T]Int := sub(V, rhs);
		# THIS*(rhs: T#&) [T]Int := mul(V, rhs);
		# THIS/(rhs: T#&) [T]Int := div(V, rhs);
		# THIS%(rhs: T#&) [T]Int := mod(V, rhs);

		THIS+=(rhs: T#&) [T]Int& := THIS := THIS + rhs;
		THIS-=(rhs: T#&) [T]Int& := THIS := THIS - rhs;
		THIS*=(rhs: T#&) [T]Int& := THIS := THIS * rhs;
		THIS/=(rhs: T#&) [T]Int& := THIS := THIS / rhs;
		THIS%=(rhs: T#&) [T]Int& := THIS := THIS % rhs;

		# <T #&> INLINE := V;
	}/)
}