(/rl/)

INCLUDE 'std/vector'
INCLUDE 'std/index'
INCLUDE 'std/buffer2d'

::std [T:TYPE] Dyn2D
{
PRIVATE:
	Content: [T!]Buffer2D;
PUBLIC:
	{NULL};

	{&&mv}:
		Content := mv.Content
	{
		mv.Content := NULL;
	}

	:gc{data: T *, w: UM, h: UM}: Content(data, w, h);

	:alloc{w: UM, h: UM}:
		Content(std::heap::[T]alloc(w * h).Data, w, h);

	:new{w: UM, h: UM} (:alloc(w, h))
	{
		FOR(i ::= Content.W * Content.H; i--;)
			Content.Data[i].{};
	}

	DESTRUCTOR
	{
		IF(Content.Data)
		{
			FOR(i ::= Content.W*Content.H; i--;)
				Content.Data[i].~;
			std::heap::free(Content.Data);
		}
	}

	#? THIS! & INLINE ::= Content;
}