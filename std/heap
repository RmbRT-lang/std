(/rl/)

INCLUDE 'std/range'
INCLUDE 'std/buffer'

::std::heap
{
	[T: TYPE]
	clone(data: T! #\, size: U4) [T]Buffer
	{
		tmp ::= [T]alloc_array(size);
		range::copy_construct(tmp.Data, data, size);
		= (tmp.Data, tmp.Size);
	}

	[T: TYPE]
	clone_virtual_p(data: T! #\) T! \
	{
		offset ::= <UM>(data) - <UM>(&&&*data);
		obj ::= <T! \>(<UM>(heap::alloc_raw(SIZEOF(#*data))) + offset);
		failed ::= TRUE;
		COPY_RTTI(*data, obj);
		TRY { <T \>(obj)->VIRTUAL{*data}; failed := FALSE; }
		FINALLY IF(failed) heap::free(obj);

		= obj;
	}

	[T: TYPE]
	clone_virtual_v(data: T! &&) T \
	{
		offset ::= <UM>(&data) - <UM>(&&&data);
		obj ::= <T \>(<UM>(heap::alloc_raw(SIZEOF(# data))) + offset);
		failed ::= TRUE;
		COPY_RTTI(data, obj);
		TRY { <T \>(obj)->VIRTUAL{<T!&&>(data)}; failed := FALSE; }
		FINALLY IF(failed) heap::free(obj);

		= obj;
	}

	[T: TYPE]
	clone_buf(data: [T!]Buffer#&) [T]Buffer := [T]clone(data.Data, data.Size);


	alloc_raw(bytes: U4) VOID* := detail::libc::malloc(bytes);
	
	[T: TYPE] alloc() T \ --
	{
		ptr ::= alloc_raw(SIZEOF(T));
		ASSERT(ptr != NULL);
		= <T \>(ptr);
	}

	[T: TYPE] alloc_array(count: U4) [T]Buffer
	{
		b: [T]Buffer(<T \>(detail::libc::malloc(count * SIZEOF(T))), count);
		ASSERT(!count || b.Data);
		= b;
	}

	[T: TYPE; Args...: TYPE] new(args: Args!&&...) T! *
	{
		p ::= [T]alloc();
		TRY
		{
			p->{<Args!&&>(args)...};
			x ::= p;
			p := NULL;
			= x;
		}
		FINALLY IF(p)
			heap::free(p);
	}


	calloc_raw(bytes: UM) VOID* := detail::libc::calloc(bytes, 1);
	[T: TYPE] calloc() T *
	{
		v ::= <T \>(alloc_raw(SIZEOF(T)));
		v->{};
		= v;
	}
	[T: TYPE] calloc_array(count: UM) [T]Buffer
	{
		v ::= [T]alloc(count);
		range::default_construct(v, count);
		= v;
	}

	[T: TYPE] delete_buf(v: [T!]Buffer) VOID --
	{
		range::destroy_buf(v);
		heap::free_buf(v);
	}

	[T: TYPE] delete(ptr: T! \) VOID --
	{
		addr ::= &&&*ptr;
		ptr->~;
		detail::libc::free(addr);
	}

	free(mem: VOID#\) VOID := detail::libc::free(mem);

	[T: TYPE] free_buf(v: [T!]Buffer) VOID --
	{ detail::libc::free(v.Data); }

	[T: TYPE] dup(value: T! &&) T \ -- := [T]new(<T!&&>(value));
}

::std::detail::libc
{
	EXTERN malloc(UM) VOID *;
	EXTERN calloc(UM, UM) VOID *;
	EXTERN free(VOID #\) VOID;
	EXTERN realloc(VOID #\, UM) VOID;
}