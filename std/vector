(/rl/)

INCLUDE 'std/range'
INCLUDE 'std/dyn'
INCLUDE 'std/shared'
INCLUDE 'std/memory'
INCLUDE 'std/math/limit'
INCLUDE 'std/iterator'

::std [T: TYPE] Vec
{
PRIVATE:
	Content: [T!]Buffer;
	Capacity: UM;
PUBLIC:
	{};
	{size: UM}:
		Content(heap::[T]alloc(size)),
		Capacity(size)
	{
		range::default_construct(Content.Data, ##Content);
	}
	:reserve{capacity: UM}:
		Content(heap::[T]alloc(capacity)),
		Capacity(capacity)
	{
		Content.Size := 0;
	}

	{#&copy}:
		Content(heap::clone(copy.Content)),
		Capacity(##copy);
	{&&move}:
		Content(move.Content),
		Capacity(move.Capacity)
	{
		move.{};
	}

	:copy{content: [T#]Buffer #&}:
		Content(heap::clone(content)),
		Capacity(##content);
	:move{content: [T!]Buffer &&}:
		Content(content),
		Capacity(##content)
	{
		content := NULL;
	}

	[A...:TYPE]
	:vec{a: A!&&...} := :reserve(SIZEOF...(A!))
	{ (THIS += <A!&&>(a))...; }

	DESTRUCTOR
	{
		IF(Content)
			heap::delete(Content);
	}

	erase(at: UM) VOID
	{
		ASSERT(at < ##THIS);

		THIS![at].~;
		--Content.Size;
		range::move_construct(&THIS!.Data[at], &THIS!.Data[at+1], ##THIS-at);
	}

	append_move(rhs: T!-std::Buffer) VOID
	{
		cap: UM;
		IF(!Capacity)
			cap := ##rhs;
		ELSE IF(Capacity > ##THIS + ##rhs)
			cap := Capacity;
		ELSE
			cap := (##THIS + ##rhs + (Capacity >> 4)) | 3;

		reserve(cap);

		FOR(it ::= rhs.start(); it; it++)
			THIS += &&it!;
	}

	append(rhs: T!#-std::Buffer) VOID
	{
		cap: UM;
		IF(!Capacity)
			cap := ##rhs;
		ELSE IF(Capacity > ##THIS + ##rhs)
			cap := Capacity;
		ELSE
			cap := (##THIS + ##rhs + (Capacity >> 4)) | 3;

		reserve(cap);

		FOR(it ::= rhs.start(); it; it++)
			THIS += it!;
	}

	(/
		Reserve the requested amount of space, and leave an uninitialised hole
		in the contents at the requested location. If the hole is within the
		contents, increases the container size to accomodate the hole.
	/)
	PRIVATE reserve_with_hole_at(cap: UM, at: UM) BOOL
	{
		ASSERT(at <= ##Content);
		ASSERT(at <= cap);

		// Make sure there is space for the hole.
		IF(at < ##Content && cap == ##Content)
			++cap;

		// Is the container already large enough?
		IF(Capacity >= cap)
			// Grow hole if required.
			IF(at < ##Content)
			{
				Content.Data[##Content].{&&Content.back()};
				failed ::= TRUE;
				// Shift contents right.
				TRY
				{
					range::move_assign_r(
						Content.Data+at+1,
						Content.Data+at,
						##Content-(at+1));
					failed := FALSE;
				} FINALLY IF(failed)
				{
					Content.back() := &&Content.Data[##Content];
					Content.Data[##Content].~;
				}

				Content[at].~; // Destroy hole.
				++Content.Size; // Adjust size.

				= TRUE;
			} ELSE
				= FALSE;

		// Reserve enough space.
		hasHole ::= at != ##Content;
		new ::= heap::[T]alloc(cap).cut(##Content + hasHole);

		range::move_construct(new.Data, Content.Data, at);
		range::move_construct(new.Data+at+1, Content.Data+at, ##Content-at);

		IF(Content.Data)
			heap::delete(Content);
		Content := new;
		Capacity := cap;
		= hasHole;
	}

	(// Reserve space for the requested capacity, without shrinking. /)
	reserve(cap: UM) VOID
	{
		reserve_with_hole_at(cap, ##Content);
	}

	resize(size: UM) VOID
	{
		reserve(size);
		IF(##Content > size)
			range::destroy(Content.drop_start(size));
		ELSE
			range::default_construct(
				&THIS[:ok(##THIS)],
				size - ##Content);
		Content.Size := size;
	}

	(/
		Reserve space for at least one more entry than is currently held.
		Increases ##Content. Leaves an uninitialised hole at the requested
		location.
	/)
	PRIVATE grow_reserve_with_hole_at(at: UM) VOID
	{
		cap: UM;
		IF(!Capacity)
			cap := 1;
		ELSE IF(Capacity > ##THIS)
			cap := Capacity;
		ELSE
			cap := (Capacity+1 + (Capacity >> 4)) | 3;

		// Increase content if appending.
		Content.Size += !reserve_with_hole_at(cap, at);
	}

	[A...:TYPE]
	emplace_at(at: UM, a: A!&&...) T! & INLINE
	{
		grow_reserve_with_hole_at(at);
		failed ::= TRUE;
		TRY
		{
			elem:?& := THIS[at];
			elem.{<A!&&>(a)...};
			failed := FALSE;
			= elem;
		} FINALLY IF(failed)
		{
			IF(at != ##THIS-1)
			{
				THIS[at].{&&THIS[at+1]};
				range::move_assign(&THIS[at+1], &THIS[at+2], ##THIS-(at+2));
				THIS!.back().~;
			}
			Content.Size--;
		}
	}

	[A:TYPE]
	THIS+=(v: A!&&) T! & INLINE
		:= emplace_at(##THIS, <A!&&>(v));

	#? THIS[i: Index] T!#?& INLINE := Content[i];

	# <BOOL> := Content.Size;

	# ##THIS UM INLINE := Content.Size;
	# data() T! #* INLINE := Content.Data;
	# empty() BOOL INLINE := ##THIS == 0;

	#? THIS! & INLINE ::= Content;

	#? start() [T!]Vec#?-Iterator INLINE := (&THIS, 0);
	#? end() [T!]Vec#?-Iterator INLINE := (&THIS, ##THIS-1);

	[TCmp:TYPE]
	Cmp
	{
		STATIC cmp(a: [T!]Vec#&, b:[T!]Vec#&) SM
		{
			len # ::= math::min(##a, ##b);
			FOR(i ::= 0; i < len; i++)
			{
				sign ::= TCmp::cmp(a, b);
				IF(sign) = sign;
			}
			IF(##a == ##b)
				= 0;
			= ##a > ##b ? 1 : -1;
		}
	}
}

::std [T:TYPE] TYPE DynVec := T! - Dyn - Vec;
::std [T:TYPE] TYPE SharedVec := T! - Shared - Vec;