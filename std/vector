(/rl/)

INCLUDE 'std/range'
INCLUDE 'std/memory'
INCLUDE 'std/help'
INCLUDE 'std/types'
INCLUDE 'std/math/limit'
INCLUDE 'std/iterator'

::std [T: TYPE] Vector
{
PRIVATE:
	Content: [T!]Buffer;
PUBLIC:
	{};
	{size: UM}:
		Content([T]alloc(size))
	{
		FOR(i ::= 0; i < Content.Size; i++)
			Content.Data[i].{};
	}
	{copy: [T!]Vector#&}:
		Content(clone(copy.Content));
	{move: [T!]Vector&&}:
		Content(move.Content)
	{
		move.Content := NULL;
	}

	{:copy, content: [T#]Buffer #&}:
		Content(clone(content));
	{:move, content: [T!]Buffer &&}:
		Content(content)
	{
		content := NULL;
	}

	[A...:TYPE]
	{:emplace, a: A!&&...}:
		Content(NULL)
	{
		_emplace_back(<A!&&>(a)...);
	}

	[A:TYPE; A_...:TYPE]
	PRIVATE _emplace_back(a: A!&&, a_: A_!&&...) INLINE VOID
	{
		THIS += <A!&&>(a);
		_emplace_back(<A_!&&>(a_)...);
	}
	PRIVATE _emplace_back() INLINE VOID {}

	THIS:=(move: [T!]Vector&&) [T!]Vector & := help::move_assign(THIS, move);
	THIS:=(copy: [T!]Vector#&) [T!]Vector & := help::copy_assign(THIS, copy);

	DESTRUCTOR
	{
		IF(Content)
			delete(Content);
	}

	erase(at: UM) VOID
	{
		ASSERT(at < ##THIS);

		new ::= [T]alloc(Content.Size-1);
		range::move_construct(new.Data, Content.Data, at);
		range::move_construct(new.Data+at, Content.Data+at+1, new.Size-at);
		TRY IF(Content)
			delete(Content);
		FINALLY
			Content := new;
	}

	[A...:TYPE]
	emplace(at: UM, a: A!&&...) INLINE VOID
	{
		ASSERT(at <= ##THIS);

		new ::= [T]alloc(Content.Size+1);
		ASSERT(new.Data != NULL);
		range::move_construct(new.Data, Content.Data, at);
		range::move_construct(new.Data+at+1, Content.Data+at, Content.Size-at);

		new.Data[at].{<A!&&>(a)...};

		TRY IF(Content)
			delete(Content);
		FINALLY
			Content := new;
	}

	[A:TYPE]
	THIS+=(a: A!&&) VOID
	{
		emplace(##THIS, <A!&&>(a));
	}

	[A:TYPE]
	THIS+=(at: {{:at, UM}, A!&&}) VOID
	{ emplace(at.(1), <A!&&>(at.(2))); }

	[A:TYPE]
	THIS+=(at: {{:at, :back}, A!&&}) VOID
	{ emplace(##THIS, <A!&&>(at.(2))); }

	[A:TYPE]
	THIS+=(at: {{:at, :front}, A!&&}) VOID
	{ emplace(0, <A!&&>(at.(2))); }

	THIS[i: UM] INLINE T!& := Content[i];
	# THIS[i: UM] INLINE T!#& := Content[i];

	# <BOOL> := Content.Size;

	# ##THIS INLINE UM := Content.Size;
	# data() INLINE T! #* := Content.Data;
	# empty() INLINE BOOL := ##THIS == 0;
	# back() INLINE T!#& := Content[Content.Size-1];
	back() INLINE T!& := Content[Content.Size-1];

	# front() INLINE T!#& := Content[0];
	front() INLINE T!& := Content[0];

	# content() INLINE [T!#]Buffer := Content;
	content() INLINE ::= Content;

	# range(start: UM, length: UM) [T!#]Buffer
		:= Content.range(start, length);
	range(start: UM, length: UM) [T!]Buffer
		:= Content.range(start, length);

	start() INLINE [T!]Vector-Iterator := (&THIS, 0);
	# start() INLINE [T!]Vector#-Iterator := (&THIS, 0);
	end() INLINE [T!]Vector-Iterator := (&THIS, ##THIS-1);
	# end() INLINE [T!]Vector#-Iterator := (&THIS, ##THIS-1);

	[TCmp:TYPE]
	Cmp
	{
		STATIC cmp(a: [T!]Vector#&, b:[T!]Vector#&) SM
		{
			len # ::= math::min(##a, ##b);
			FOR(i ::= 0; i < len; i++)
			{
				sign ::= TCmp::cmp(a, b);
				IF(sign) RETURN sign;
			}
			IF(##a == ##b)
				RETURN 0;
			RETURN ##a > ##b ? 1 : -1;
		}
	}
}