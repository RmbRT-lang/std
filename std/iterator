(/rl/)

::std [T: TYPE; V: TYPE]
Iterator
{
	PROTECTED Elems: V! \;
	PROTECTED Current: UM;

	{elems: V! \, start: UM}:
		Elems(elems),
		Current(start);

	# get() T!& INLINE := (*Elems)[Current];
	# THIS! T!& INLINE := (*Elems)[Current];
	# ok() [T!; V!]OkIterator INLINE := (Elems, Current);

	next() VOID
	{
		ASSERT(Current < ##*Elems);
		++Current;
	}

	++THIS THIS& INLINE { next(); = THIS; }
	THIS++ THIS INLINE { v ::= THIS; next(); = v; }
	--THIS THIS& INLINE { prev(); = THIS; }
	THIS-- THIS INLINE { v ::= THIS; prev(); = v; }

	# *THIS T!& INLINE := get();

	# THIS+(offset: UM) THIS
	{
		ASSERT(Current+offset <= ##*Elems);
		= (Elems, Current + offset);
	}

	# ##THIS UM INLINE := ##*Elems-Current;
	# THIS() UM INLINE := Current;

	THIS += (offset: UM) VOID
	{
		ASSERT(Current + offset <= ##*Elems);
		Current += offset;
	}

	prev() VOID
	{
		ASSERT(~Current);
		--Current;
	}

	# <BOOL> INLINE := Current < ##*Elems;
}

::std [T: TYPE; V: TYPE]
OkIterator -> [T!; V!]Iterator
{
	{elems: V! \, start: UM} -> (elems, start);

	next() VOID INLINE { ++THIS.Current; }
	++THIS THIS& INLINE { next(); = THIS; }
	THIS++ THIS INLINE { v ::= THIS; next(); = v; }

	prev() VOID INLINE { --THIS.Current; }
	--THIS THIS& INLINE { prev(); = THIS; }
	THIS-- THIS INLINE { v ::= THIS; prev(); = v; }

	# get() T!& INLINE := (*THIS.Elems)[:ok(THIS.Current)];
	# THIS! T!& INLINE := (*THIS.Elems)[:ok(THIS.Current)];
	# *THIS T!& INLINE := get();

	# THIS+(offset: UM) THIS INLINE
		:= (THIS.Elems, THIS.Current + offset);

	THIS += (offset: UM) VOID INLINE
		{ THIS.Current += offset; }
}

(/
TEST "parallel for" {
	v: INT-std::Vec(20);
	FOR||(it ::= v.start().ok())
		*it := 5;

	FOR(it ::= v.start().ok(); it; it += SIMD)
	||{ ##it } {
		*(it + IOTA) := 5;
	}
}


	(//
	A := &v;
	B := v.data;
	C := v.length
	D := 0;
.for:
	IF D < C
		JMP .end_for
	D := v.length - 0;
	SIMD D
	E := E + I

.end_for:
	/)
/)