(/rl/)

::std::code::utf8
{
	size(firstByte: U1) UM
	{
		IF(firstByte & 0x80 == 0)
			= 1;
		IF(firstByte & 0xe0 == 0xc0)
			= 2;
		IF(firstByte & 0xf0 == 0xe0)
			= 3;
		IF(firstByte & 0xf8 == 0xf0)
			= 4;

		DIE "invalid lead byte";
	}

	is_follow(byte: U1) ? INLINE
		:= byte & 0xc0 == 0x80;

	point(in: CHAR #\) U4
	{
		size: UM;
		= point_and_len(in, &size);
	}

	point_and_len(
		in: CHAR #\,
		size: UM \
	) U4
	{
		*size := utf8::size(in[0]);
		IF(*size == 1)
			= in[0];

		STATIC masks: U1#[](0x1f, 0x0f, 0x07);

		out ::= <U4>(in[0] & masks[*size-2]);

		DO(i ::= 1)
		{
			ASSERT(is_follow(in[i]));
			out <<= 6;
			out |= <U4>(in[i] & 0x3f);
		} WHILE(++i < *size)

		= out;
	}

	encode(src: U4, dst: CHAR \) UM
	{
		size: UM :=
			(src < 0x00080) ?? 1 :
			(src < 0x00800) ?? 2 :
			(src < 0x10000) ?? 3 :
			4;

		STATIC start: U1#[](0xc0, 0xe0, 0xf0);
		end ::= dst+size;
		FOR(i ::= 0; i < size; i++)
			*--end := <U1>(src >> 6*i);

		IF(size == 1)
			= 1;

		dst[0] |= start[size-2];
		FOR(i ::= 1; i < size; i++)
			dst[i] := 0x80 | (dst[i] &0x3f);

		= size;
	}
}