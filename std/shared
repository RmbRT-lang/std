(/rl/)

INCLUDE 'std/memory'
INCLUDE 'std/dyn'

::std [T: TYPE] SharedOpt
{
	PRIVATE Ptr: T! *;
	PRIVATE Container: detail::SharedAlloc *;

	{}: Container(NULL), Ptr(NULL);
	{BARE} (NULL);
	{NULL}: Container(NULL), Ptr(NULL);
	{&&mv}: Container(mv.Container), Ptr(mv.Ptr) { mv.{NULL}; }

	{#&cpy}: Container(cpy.Container), Ptr(cpy.Ptr)
	{ IF(Container) Container->ref(); }

	# is_unique() BOOL -- := !Ptr || Container->is_unique();

	clone_if_shared() VOID
	{
		IF(is_unique()) RETURN;

		offset ::= <UM>(Ptr) - <UM>(Container->obj_base_addr());

		Container := Container->clone();
		Ptr := <T! *>(<UM>(Container->obj_base_addr()) + offset);
	}

	:gc{p: T! *}: Ptr(p), Container(NOINIT)
	{
		IF(p)
			Container := heap::[T-detail::SplitAlloc]new(:gc(p));
		ELSE
			Container := NULL;
	}

	:share{v: T!-std::Dyn}:
		Ptr := v.ptr(),
		Container := heap::[T-detail::SplitAlloc]new(:share(&&v))
	{
		ASSERT(Ptr);
	}

	[A...:TYPE]
	:make{a: A!&&...} := :share(:make(<A!&&>(a)...));

	[A...:TYPE]
	:make_if{if: BOOL, a: A!&&...} := :share(:make_if(if, <A!&&>(a)...));

	[A...:TYPE]
	:if{if: BOOL, a: A!&&...} { IF(if) THIS := :a(<A!&&>(a)...); }

	[A...:TYPE]
	:a{a: A!&&...}:
		Container(heap::[T-detail::CompactAlloc]new(<A!&&>(a)...)),
		Ptr(NOINIT)
	{
		Ptr := &<T-detail::CompactAlloc *>(Container)->Value;
	}

	[U:TYPE; A...:TYPE] :a.U!{a: A!&&...}:
		Container := heap::[U-detail::CompactAlloc]new(<A!&&>(a)...),
		Ptr (NOINIT)
	{
		Ptr := &<U-detail::CompactAlloc *>(Container)->Value;
	}

	[U:TYPE] :dup{rhs: U!&&}
	{
		alloc: [U-detail::CompactAlloc]Dyn := :a(<U!&&>(rhs));
		Ptr := <<T \>>(&alloc.ptr()->Value);
		Container := alloc.release();
	}
	[U:TYPE] {rhs: U!-SharedOpt} -- := :<>(rhs);
	[U:TYPE] :<>{rhs: U!-SharedOpt} --
	{
		IF(rhs.ptr())
		{
			Ptr := <<T! \>>(rhs.ptr());
			Container := rhs.container();
			rhs.{};
		}
	}

	[U:TYPE] :try{rhs: U!-SharedOpt} --
	{
		IF(rhs)
			IF(Ptr := <<T! *>>(rhs))
			{
				Container := rhs.container();
				rhs.{};
			}
	}

	DESTRUCTOR { IF(Container) Container->deref(); Container := NULL; }

	[Args...: TYPE]
	ensure(args: Args!&&...) T! & --
	{
		IF(!THIS)
			THIS.{:a(<Args!&&>(args)...)};
		= *Ptr;
	}

	# ptr() T! * -- := Ptr;
	# <T! *> -- := Ptr;
	# THIS! T! & -- := *THIS;
	# *THIS T! & -- { ASSERT(Ptr); = *Ptr; }
	# THIS() T! & -- := *THIS;
	# container() detail::SharedAlloc * := Container;

	# THIS<>(rhs: T! # \) S1 := ptr() == rhs ?? 0 : *THIS <> *rhs;
}

::std [T:TYPE] Shared -> [T!]SharedOpt
{
	[A...:TYPE] { a: A!&&... } -> (:a, <A!&&>(a)...);
	[A...:TYPE] :a{ a: A!&&... } -> (:a, <A!&&>(a)...);
	[A...:TYPE] :make{ a: A!&&... } -> (:make, <A!&&>(a)...);
	[U:TYPE] :dup{rhs: U!&&} -> (:dup, <U!&&>(rhs));
	[U:TYPE; A...:TYPE] :a.U!{ a: A!&&... } -> (:a.U!, <A!&&>(a)...);
	[U:TYPE] :<>{ rhs: U!-std::Shared } -> (:<>, &&rhs);
	[U:TYPE] :!{ rhs: U!-SharedOpt } -> (:<>, &&rhs) { ASSERT(THIS); }
	:share{v: T!-std::Dyn} -> (:share, &&v);
	[U:TYPE] :gc{p: U! \} -> (:gc, p);

	{BARE} -> (BARE);
	{#&};
	{&&};
}

::std [T:TYPE] Weak
{
	PRIVATE Container: detail::SharedAlloc *;
	PRIVATE Ptr: T! *;

	{}: Container(NULL), Ptr(NULL);
	{BARE} ();
	{NULL}: Container(NULL), Ptr(NULL);
	{&&mv}: Container(mv.Container), Ptr(mv.Ptr) { mv.{}; }
	
	{#&cpy}: Container(cpy.Container), Ptr(cpy.Ptr)
	{ IF(Container) Container->ref_weak(); }

	:weak{v: [T!]Shared #&}: Container(v.container()), Ptr(v.ptr())
	{
		IF(Container)
			Container->ref_weak();
	}

	[U:TYPE] :<>{rhs: U!-SharedOpt #&} --
	{
		IF(rhs)
		{
			Ptr := <<T! \>>(rhs.ptr());
			Container := rhs.container();
			Container->ref_weak();
		}
	}

	[U:TYPE] :try{rhs: U!-SharedOpt #&} --
	{
		IF(rhs)
			IF(Ptr := <<T! *>>(rhs.ptr()))
			{
				Container := rhs.container();
				Container->ref_weak();
			}
	}

	DESTRUCTOR { IF(Container) Container->deref_weak(); }

	# ptr() T! * -- := Container && Container->Refs ?? Ptr : NULL;

	# <T! *> -- := ptr();
	# THIS! T! & -- := *THIS;
	# *THIS T! & -- { p ::= ptr(); ASSERT(p); = p; }
	# container() detail::SharedAlloc * := Container;

	# THIS<>(rhs: T! # \) S1 := THIS() <> *rhs;
}

::std::detail SharedAlloc VIRTUAL
{
	Refs: U2;
	Weaks: U2;

	{}: Refs(1);
	{BARE} ();
	{&&} { DIE; }
	{#&} ();

	ref() VOID -- { ASSERT(Refs); ASSERT(++Refs); }
	ref_weak() VOID -- { ASSERT(++Weaks); }

	# ABSTRACT clone() SharedAlloc \;

	# ABSTRACT obj_base_addr() VOID #\;

	# is_unique() BOOL -- := Refs == 1 && !Weaks;

	deref() VOID
	{
		ASSERT(Refs);
		IF(!--Refs)
		{
			THIS.~;
			IF(!Weaks)
				heap::free(&THIS);
		}
	}

	deref_weak() VOID
	{
		ASSERT(Weaks);
		IF(!--Weaks && !Refs)
			heap::free(&THIS);
	}
}

::std::detail [T:TYPE] CompactAlloc -> SharedAlloc
{
	Value: T;
	PRIVATE {#&} (BARE) { DIE; }
	PRIVATE {&&} (BARE) { DIE; }

	[A...:TYPE]{a: A!&&...}: Value(<A!&&>(a)...);

	# FINAL obj_base_addr() VOID #\ := &&&Value;
	# FINAL clone() THIS \ := std::heap::[THIS]new(Value);
}

::std::detail [T:TYPE] SplitAlloc -> SharedAlloc, PRIVATE [T]Dyn
{
	:gc{ptr: T! \}-> (), (:gc(ptr));
	:share{v: T!-std::Dyn} -> (), (&&v);

	# FINAL obj_base_addr() VOID #\ := &&&*THIS;
	# FINAL clone() [T]VirtuallyClonedAlloc \
		:= [T]VirtuallyClonedAlloc::from(THIS.ptr());
}

::std::detail [T:TYPE] VirtuallyClonedAlloc -> SharedAlloc
{
	Offset: U2;

	DESTRUCTOR { THIS->~; }

	:offset{offset: U2} : Offset := offset;

	#? *THIS T! #? & := *ptr();

	STATIC from(p: T #\) THIS \
	{
		sz ::= SIZEOF(# *p);
		container ::= <[T]VirtuallyClonedAlloc \>(
			std::heap::alloc_raw(
				SIZEOF([T]VirtuallyClonedAlloc)
				+ sz));
		container->{:offset(<UM>(p) - <UM>(&&&*p))};
		COPY_RTTI(*p, container->ptr());
		container->ptr()->VIRTUAL{*p};
		= container;
	}

	#? ptr() T! #? \ := <T #?\>(<UM>(&(&THIS)[1]) + Offset);

	# FINAL obj_base_addr() VOID #\ := <T #\>(<UM>(&(&THIS)[1]));
	# FINAL clone() [T]VirtuallyClonedAlloc \ := from(ptr());
}